#boolens in python can take true and false answers :

# 1):

print(10 > 9)
print(10 == 9)
print(10 < 9)

# 2) :

a = 200
b = 33

if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")


# it allows you to evaluate any values :

# 1st example:

print(bool("Hello"))
print(bool(15))

# 2nd example:

x = "Hello"
y = 15

print(bool(x))
print(bool(y))

# python operators :

# we use "+" to add together two values :

print(10 + 5)

# python arithmetic operators :

+	Addition	x + y	
-	Subtraction	x - y	
*	Multiplication	x * y	
/	Division	x / y	
%	Modulus	x % y	
**	Exponentiation	x ** y	
//	Floor division	x // y

# assignment operators :

=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
//=	x //= 3	x = x // 3	
**=	x **= 3	x = x ** 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=	x <<= 3	x = x << 3	
:=	print(x := 3)	x = 3 print(x)

# python lists :

mylist = ["apple", "banana", "cherry"]

# lists are used to store multiple items in a single variable, and are created using square brackets :

thislist = ["apple", "banana", "cherry"]
print(thislist)

# lists can also have same values :

thislist = ["apple", "banana", "cherry", "apple", "cherry"]
print(thislist)

# we use fucntion 'len()' to find a length of the list :

thislist = ["apple", "banana", "cherry"]
print(len(thislist))

# lists items can be of any data types : 

list1 = ["apple", "banana", "cherry"]
list2 = [1, 5, 7, 9, 3]
list3 = [True, False, False]

#also list can contain any values at the same time:

list1 = ["abc", 34, True, 40, "male"]

# from python's perspectives lists are defined as objects with the data type "list" :

<class 'list'>

mylist = ["apple", "banana", "cherry"]
print(type(mylist))

# use the function "list()" to create a list : 

thislist = list(("apple", "banana", "cherry")) # note the double round-brackets
print(thislist)

# access list items :

thislist = ["apple", "banana", "cherry"]
print(thislist[1])

# you can also use negative indexing :

thislist = ["apple", "banana", "cherry"]
print(thislist[-1])

# when you need to return more than 1 element : 

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:5])

# by leaving of the starter number it starts with the 1 value : 

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[:4])

# by leaving of end number it ends with the last value :

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:])

# and you can also use the negative numbers as the index : 

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[-4:-1])

# "in" function is used to define if specified item is in the list :

thislist = ["apple", "banana", "cherry"]
if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")

# you can change specific value through the index :

thislist = ["apple", "banana", "cherry"]
thislist[1] = "blackcurrant"
print(thislist)

# you can also change the range of values by using index :

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
thislist[1:3] = ["blackcurrant", "watermelon"]
print(thislist)

# sometimes you can also insert more items than in your range :

thislist = ["apple", "banana", "cherry"]
thislist[1:2] = ["blackcurrant", "watermelon"]
print(thislist)

# you can insert less items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly :

thislist = ["apple", "banana", "cherry"]
thislist[1:3] = ["watermelon"]
print(thislist)

# ".append()" function is used to add items to a list :

thislist = ["apple", "banana", "cherry"]
thislist.append("orange")
print(thislist)


# to insert item to a specific index you have a fucntion ".insert(index, item)" :

thislist = ["apple", "banana", "cherry"]
thislist.insert(1, "orange")
print(thislist)

# to append elements from one list to another you can use fucntion ".extend(item)" :

thislist = ["apple", "banana", "cherry"]
tropical = ["mango", "pineapple", "papaya"]
thislist.extend(tropical)
print(thislist)

# also this function is not only for lists but for sets, tuples, and dictionaries :

thislist = ["apple", "banana", "cherry"]
thistuple = ("kiwi", "orange")
thislist.extend(thistuple)
print(thislist)

# to remove items from the list you can use fucntion ".remove(item)" :

thislist = ["apple", "banana", "cherry"]
thislist.remove("banana")
print(thislist)

# if there are more items with the same value first one which occures will be removed :

thislist = ["apple", "banana", "cherry", "banana", "kiwi"]
thislist.remove("banana")
print(thislist)

# to remove item with specific index you can use fucntion ".pop(index)" :

thislist = ["apple", "banana", "cherry"]
thislist.pop(1)
print(thislist)

# but if you don't write the index it will remove the last item :

thislist = ["apple", "banana", "cherry"]
thislist.pop()
print(thislist)

# "del" function is also remove by using specific index :

thislist = ["apple", "banana", "cherry"]
del thislist[0]
print(thislist)

# but del fucntion also can remove the whole list :

thislist = ["apple", "banana", "cherry"]
del thislist

# ".clear()" fucntion can delete whole list too :

thislist = ["apple", "banana", "cherry"]
thislist.clear()
print(thislist)

# you can use the for loop to loop through the list : 

thislist = ["apple", "banana", "cherry"]
for x in thislist:
  print(x)

# you can also loop through the list by the index by using the functions "range()" and "len()" :

thislist = ["apple", "banana", "cherry"]
for i in range(len(thislist)):
  print(thislist[i])

# additionally you can use the while loop by using the len() fucntion :

thislist = ["apple", "banana", "cherry"]
i = 0
while i < len(thislist):
  print(thislist[i])
  i = i + 1

# a short hand for loop that will print all items in a list :

thislist = ["apple", "banana", "cherry"]
[print(x) for x in thislist]

# you can also use loops to output specific items :

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []

for x in fruits:
  if "a" in x:
    newlist.append(x)

print(newlist)

# but you can try to use this list comprehension with one line of code :

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist = [x for x in fruits if "a" in x]

print(newlist)

# syntax of the code above :

newlist = [expression for item in iterable if condition == True]

# only accept items that are not apple :

newlist = [x for x in fruits if x != "apple"]

# with no id statement :

newlist = [x for x in fruits]

# it can also be iterable : 

newlist = [x for x in range(10)]

# conditions for example accepts only numbers lower than 5: 

newlist = [x for x in range(10) if x < 5]

# set the values in the list to uppercase : 

newlist = [x.upper() for x in fruits]

# set all values in the new list to 'hello' :

newlist = ['hello' for x in fruits]

# return orange insted of banana : 

newlist = [x if x != "banana" else "orange" for x in fruits]

# "sort()" function to sort the alphanumerically :

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()
print(thislist)

# numerically : 

thislist = [100, 50, 65, 82, 23]
thislist.sort()
print(thislist)

# sort the list descending, you use (reverse = True) : 

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort(reverse = True)
print(thislist)

# you can also customize your own function by using keyword key = function : 

def myfunc(n):
  return abs(n - 50)

thislist = [100, 50, 65, 82, 23]
thislist.sort(key = myfunc)
print(thislist)

# sorting can give an unexpected result : 

thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort()
print(thislist)

# you can sort the function by the lower or upper words : 

thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort(key = str.lower)
print(thislist)

# reverse the sort() : 

thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.reverse()
print(thislist)

# ".copy()" use this function to copy lists :

thislist = ["apple", "banana", "cherry"]
mylist = thislist.copy()
print(mylist)

# and you can also copy a list by using the function list() : 

thislist = ["apple", "banana", "cherry"]
mylist = list(thislist)
print(mylist)

# to copy you can use : operator :

thislist = ["apple", "banana", "cherry"]
mylist = thislist[:]
print(mylist)

# you can use + to join lists : 

list1 = ["a", "b", "c"]
list2 = [1, 2, 3]

list3 = list1 + list2
print(list3)

# joining one by one : 

list1 = ["a", "b" , "c"]
list2 = [1, 2, 3]

for x in list2:
  list1.append(x)

print(list1)

# method  extend is used for join the lists : 

list1 = ["a", "b" , "c"]
list2 = [1, 2, 3]

list1.extend(list2)
print(list1)

# list methods : 

append()	Adds an element at the end of the list
clear()	Removes all the elements from the list
copy()	Returns a copy of the list
count()	Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()	Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()	Sorts the list

# Tuples :

mytuple = ("apple", "banana", "cherry")

# creating a tuple : 

thistuple = ("apple", "banana", "cherry")
print(thistuple)

# you can have the items with the same value : 

thistuple = ("apple", "banana", "cherry", "apple", "cherry")
print(thistuple)

# you can find the length of the tuple :

thistuple = ("apple", "banana", "cherry")
print(len(thistuple))

# if you want to create a tuple with one item you should add comma in the end :

thistuple = ("apple",)
print(type(thistuple))

#NOT a tuple
thistuple = ("apple")
print(type(thistuple))


# tuple items can be any data type :

tuple1 = ("apple", "banana", "cherry")
tuple2 = (1, 5, 7, 9, 3)
tuple3 = (True, False, False)

# one tuple can contain many data types : 

tuple1 = ("abc", 34, True, 40, "male")

# in python tuple is classified as 'tuple' :

mytuple = ("apple", "banana", "cherry")
print(type(mytuple))


# 

